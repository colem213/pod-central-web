Description: Pod Central Web App
Transform: AWS::Serverless-2016-10-31
Parameters:
  DomainName:
    Type: String
    AllowedPattern: .*\.?podcentral\.io$
  RssFeedStage:
    Type: String
Conditions:
  IsApexRecord: !Equals [ !Ref DomainName, podcentral.io ]
  IsProduction: !Equals [ !Ref DomainName, podcentral.io ]
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AliasAttributes: ['email']
      AutoVerifiedAttributes: ['email']
      Policies:
        PasswordPolicy:
          MinimumLength: !If [ IsProduction, 8, 6 ]
          RequireLowercase: !If [ IsProduction, true, false ]
          RequireNumbers: !If [ IsProduction, true, false ]
          RequireSymbols: !If [ IsProduction, true, false ]
          RequireUppercase: !If [ IsProduction, true, false ]
      Schema:
        - Name: email
          Required: true
        - Name: given_name
          Required: true
  WebUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref WebUserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
  AuthWebRole:
    Type: AWS::IAM::Role
    Condition: IsProduction
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': 'authenticated'
      Policies:
        - PolicyName: AuthWebSubscriptionQueryAndSubDateIndex
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'dynamodb:Query'
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionTable}
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionTable}/index/SubDateIndex
        - PolicyName: AuthWebChannelGet
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ChannelQueryChannel
                Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:BatchGetItem'
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ChannelTable}
        - PolicyName: AuthWebItemQueryChannelIndex
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ItemQueryChannelIndex
                Effect: Allow
                Action: 'dynamodb:Query'
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ItemTable}/index/ChannelIndex
        - PolicyName: AuthWebRssFeedLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'execute-api:Invoke'
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RssFeedApi}/${RssFeedStage}/*/rss/*
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !ImportValue RssFeedSubArn
  IdentityPoolRoles:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Condition: IsProduction
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthWebRole.Arn
  ChannelTable:
    Type: AWS::DynamoDB::Table
    Condition: IsProduction
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ItemTable:
    Type: AWS::DynamoDB::Table
    Condition: IsProduction
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: channelId
          AttributeType: S
        - AttributeName: pubDate
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ChannelIndex
          KeySchema:
            - AttributeName: channelId
              KeyType: HASH
            - AttributeName: pubDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  SubscriptionTable:
    Type: AWS::DynamoDB::Table
    Condition: IsProduction
    DependsOn: ItemTable
    Properties:
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: channelId
          AttributeType: S
        - AttributeName: subDate
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: channelId
          KeyType: RANGE
      LocalSecondaryIndexes:
        - IndexName: SubDateIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: subDate
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ChannelUrlTable:
    Type: AWS::DynamoDB::Table
    Condition: IsProduction
    DependsOn: SubscriptionTable
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: url
          AttributeType: S
      KeySchema:
        - AttributeName: url
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ChannelIndex
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  WebAppOrigin:
    Type: AWS::S3::Bucket
    Condition: IsProduction
    Properties:
      BucketName: !Ref DomainName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  WebAppOriginPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsProduction
    Properties:
      Bucket: !Ref WebAppOrigin
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Sid: PublicReadGetObject
          Effect: Allow
          Principal: '*'
          Action: 's3:getObject'
          Resource: !Sub '${WebAppOrigin.Arn}/*'
  WebAppDistro:
    Type: AWS::CloudFront::Distribution
    Condition: IsProduction
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:423601402625:certificate/80bf49ec-7e5f-429a-acf3-36f04215b63c
          SslSupportMethod: sni-only
        Aliases:
          - !Ref DomainName
        Origins:
          - Id: !Sub ${AWS::StackName}WebAppOrigin
            DomainName: !GetAtt WebAppOrigin.DomainName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: !Sub ${AWS::StackName}WebAppOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
        CustomErrorResponses:
          - ErrorCode: '404'
            ResponseCode: '200'
            ResponsePagePath: /index.html
  WebAppDns:
    Type: AWS::Route53::RecordSetGroup
    Condition: IsProduction
    Properties:
      HostedZoneName: podcentral.io.
      RecordSets:
      - Name: !Ref 'DomainName'
        Type: !If [ IsApexRecord, A, CNAME ]
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt WebAppDistro.DomainName
  RssFeedApi:
    Type: AWS::Serverless::Api
    Condition: IsProduction
    Properties:
      StageName: !Ref RssFeedStage
      Variables:
        CHANNEL_TABLE: !Ref ChannelTable
        ITEM_TABLE: !Ref ItemTable
        SUBSCRIPTION_TABLE: !Ref SubscriptionTable
        CHANNELURL_TABLE: !Ref ChannelUrlTable
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '1.0'
          title:
            Fn::Sub: '${AWS::StackName} RSS Feed Subscription API'
        basePath:
          Fn::Sub: '/${RssFeedStage}'
        schemes:
          - 'https'
        paths:
          /rss/{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              parameters:
                - name: proxy
                  in: path
                  required: true
                  type: string
              responses: {}
              x-amazon-apigateway-auth:
                type: AWS_IAM
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Join:
                    - ''
                    -
                      - 'arn:aws:apigateway:'
                      - Ref: AWS::Region
                      - ':lambda:path/2015-03-31/functions/'
                      - Fn::ImportValue: RssFeedSubArn
                      - '/invocations'
                credentials: arn:aws:iam::*:user/*
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
            options:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: Default response for CORS method
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: |
                    {"statusCode": 200}
                passthroughBehavior: when_no_match
                type: mock
Outputs:
  userPoolId:
    Description: User Pool ID
    Value: !Ref UserPool
  clientId:
    Description: User Pool Web Client ID
    Value: !Ref WebUserPoolClient
  identityPoolId:
    Description: Identity Pool ID
    Value: !Ref IdentityPool
  feedApiHost:
    Condition: IsProduction
    Description: Rss Feed API Host
    Value: !Sub ${RssFeedApi}.execute-api.${AWS::Region}.amazonaws.com
  feedApiStage:
    Condition: IsProduction
    Description: Rss Feed API Stage
    Value: !Ref RssFeedStage
  channelTable:
    Condition: IsProduction
    Description: Channel Table Name
    Value: !Ref ChannelTable
  itemTable:
    Condition: IsProduction
    Description: Item Table Name
    Value: !Ref ItemTable
  subscriptionTable:
    Condition: IsProduction
    Description: Subscription Table Name
    Value: !Ref SubscriptionTable